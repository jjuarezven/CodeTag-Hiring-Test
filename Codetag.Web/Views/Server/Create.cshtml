
@model Codetag.Web.Models.ServerViewModel

@section headScripts
{
	<!--[if lte IE 8]><script language="javascript" type="text/javascript" src="~/Scripts/excanvas.min.js"></script><![endif]-->
	@*<script src="~/Scripts/jquery-1.7.1.min.js" type="text/javascript"></script>*@
	<link href="~/Content/examples.css" rel="stylesheet" type="text/css" />
}

@{
	ViewBag.Title = "Main Page - Servers";
}

<div id="content"></div>
<div class="demo-container">
	<div id="placeholder" class="demo-placeholder"></div>
</div>

<h2>Create a new Server</h2>

@using (Html.BeginForm()) 
{
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true)

	<fieldset>
		<legend>ServerViewModel</legend>

		<div class="editor-label">
			@Html.LabelFor(model => model.ServerName)
		</div>
		<div class="editor-field">
			@Html.EditorFor(model => model.ServerName)
			@Html.ValidationMessageFor(model => model.ServerName)
		</div>

		<div class="editor-label">
			@Html.LabelFor(model => model.MaxValue)
		</div>
		<div class="editor-field">
			@Html.EditorFor(model => model.MaxValue)
			@Html.ValidationMessageFor(model => model.MaxValue)
		</div>

		<p>
			<button type="submit">Create</button>
		</p>
	</fieldset>
}

@*<div>
	@Html.ActionLink("Back to List", "Index")
</div>*@

@section Scripts 
{
	@Scripts.Render("~/bundles/jqueryval")

	<script src="~/Scripts/jquery.flot.min.js" type="text/javascript"></script>
	<script src="~/Scripts/jquery.flot.time.min.js" type="text/javascript"></script>
	<script src="~/Scripts/jquery.flot.axislabels.js" type="text/javascript"></script>
	<script type="text/javascript">

		var data = [];
		var dataset;
		var totalPoints = 100;
		var updateInterval = 1000;
		var now = new Date().getTime();
		var serverName = '@Session["ServerName"]';

		var myData = [];
		var start = function ()
		{
			var inc = document.getElementById('content');
			var wsImpl = window.WebSocket || window.MozWebSocket;
			// if browser supports websocket
			if (wsImpl != null)
			{
				inc.innerHTML += "connecting to server ..<br/>";

				// create a new websocket and connect
				window.ws = new wsImpl('ws://localhost:27879/');

				// when data is comming from the server, this metod is called
				ws.onmessage = function (evt)
				{
					var server = $.parseJSON(evt.data);
					var valor = server.ServerValue;
					var temp = [now += updateInterval, valor];
					if (myData.length <= 100)
					{
						myData.push(temp);
					}
					else
					{
						myData.shift();
					}
				};

				// when the connection is established, this method is called
				ws.onopen = function ()
				{
					inc.innerHTML += '.. connection open<br/>';
				};

				// when the connection is closed, this method is called
				ws.onclose = function ()
				{
					inc.innerHTML += '.. connection closed<br/>';
				}
			}
			else
			{
				inc.innerHTML = "This browser doesn't support WebSockets!";
			}
		}
		window.onload = start;

		var options =
		{
			series:
			{
				lines:
				{
					show: true,
					lineWidth: 1.2,
					fill: true
				}
			},
			xaxis:
			{
				mode: "time",
				tickSize: [2, "second"],
				tickFormatter: function (v, axis)
				{
					var date = new Date(v);

					if (date.getSeconds() % 20 == 0)
					{
						var hours = date.getHours() < 10 ? "0" + date.getHours() : date.getHours();
						var minutes = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
						var seconds = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();

						return hours + ":" + minutes + ":" + seconds;
					} else
					{
						return "";
					}
				},
				axisLabel: "Time",
				axisLabelUseCanvas: true,
				axisLabelFontSizePixels: 12,
				axisLabelFontFamily: 'Verdana, Arial',
				axisLabelPadding: 10
			},
			yaxis:
			{
				min: 0,
				max: 100,
				tickSize: 5,
				tickFormatter: function (v, axis)
				{
					if (v % 10 == 0)
					{
						return v;
					}
					else
					{
						return "";
					}
				},
				axisLabel: "Connections",
				axisLabelUseCanvas: true,
				axisLabelFontSizePixels: 12,
				axisLabelFontFamily: 'Verdana, Arial',
				axisLabelPadding: 6
			},
			legend:
			{
				labelBoxBorderColor: "#fff"
			},
			grid:
			{
				backgroundColor: "#000000",
				tickColor: "#008040"
			}
		};

		$(document).ready(function ()
		{
			//dataset = [{ label: "CPU", data: data, color: "#00FF00" }];
			dataset = [{ label: serverName, data: myData, color: "#00FF00" }];
			$.plot($("#placeholder"), dataset, options);
			
			function update()
			{
				$.plot($("#placeholder"), dataset, options);
				setTimeout(update, updateInterval);
			}

			update();
		});
	</script>
}
